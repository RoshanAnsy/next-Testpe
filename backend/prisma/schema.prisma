// schema.prisma

enum Role {
  admin
  user
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?
  email       String    @unique
  password    String
  role        Role      @default(user)
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questions   Question[]
  profile     Profile?
}

model Profile {
  id             Int         @id @default(autoincrement())
  bio            String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  answers        Solution[]
  userId         Int         @unique
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedQuestions Question[]  @relation("ProfileSavedQuestions")
}

model Question {
  id             Int         @id @default(autoincrement())
  bord           String
  branch         String
  year           String
  semester       String
  subject        String
  images         String[]
  heading        String
  description    String
  thumbnail      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  verify         Boolean     @default(false)
  solutionsExist Boolean     @default(false)
  userId         Int
  user           User        @relation(fields: [userId], references: [id])
  bookmarkedBy   Profile[]   @relation("ProfileSavedQuestions")
  solution       Solution?
}

model Solution {
  id          Int       @id @default(autoincrement())
  questionId  Int       @unique
  profileId   Int
  profile     Profile   @relation(fields: [profileId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  blocks      Block[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



model Block {
  id            Int       @id @default(autoincrement())  
  solutionId    Int       
  solution      Solution  @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  type          String    // e.g., "paragraph", "heading", "list"
  content       String    // Block content (e.g., text for paragraphs)
  level         Int?      // Optional (for heading levels)
  parentBlockId Int?      // For nesting within other blocks
  order         Int       // To maintain block order within a solution
  styles        Json?     // Optional JSON for styles (e.g., bold, italic)
  altText       String?
}